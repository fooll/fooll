extends ./lateral-layout.pug

block page-title
  | Documentations

block header-title
  i.icon.fa.fa-book
  |  Documentations

block menu
  li #[a(data-scroll, href="#server-section") Zinky (server) API]
    ul.nav.doc-sub-menu
      li #[a(data-scroll, href="#server-constructor") constructor]
      li #[a(data-scroll, href="#server-listen") listen]
      li #[a(data-scroll, href="#server-addhook") addHook]
      li #[a(data-scroll, href="#server-modules") modules]
  li #[a(data-scroll, href="#foola-section") Foola (module) API]
    ul.nav.doc-sub-menu
      li #[a(data-scroll, href="#foola-tree") tree]
      li #[a(data-scroll, href="#foola-index") index.js]
      li #[a(data-scroll, href="#foola-views") views]
      li #[a(data-scroll, href="#foola-client") client (static files)]
  li #[a(data-scroll, href="#req-section") req API]
    ul.nav.doc-sub-menu
      li #[a(data-scroll, href="#req-modulename") moduleName]
      li #[a(data-scroll, href="#req-action") action]
      li #[a(data-scroll, href="#req-operation") operation]
      li #[a(data-scroll, href="#req-params") params]
      li #[a(data-scroll, href="#req-query") query]
      li #[a(data-scroll, href="#req-server") server]
  li #[a(data-scroll, href="#res-section") res API]
    ul.nav.doc-sub-menu
      li #[a(data-scroll, href="#res-render") render]
      li #[a(data-scroll, href="#res-redirect") redirect]
      li #[a(data-scroll, href="#res-json") json]
      li #[a(data-scroll, href="#res-status") status]
      li #[a(data-scroll, href="#res-contenttype") contentType]
      li #[a(data-scroll, href="#res-deliver") deliver]
      li #[a(data-scroll, href="#res-reload") reload]
      li #[a(data-scroll, href="#res-cookie") cookie]
      li #[a(data-scroll, href="#res-clearcookies") clearCookies]
  li #[a(data-scroll, href="#cli-section") zinky-cli]
    ul
      li #[a(data-scroll, href="#cli-install") Installation]
      li #[a(data-scroll, href="#cli-gen_app") Generate App]
      li #[a(data-scroll, href="#cli-gen_module") Generate Module]

block content
  br
  br
  section#intro-section.doc-section
    .section-block
      | It's recommanded to check this #[a(href="/zinky/tutorial1.html") quick tutorial], in order to get an idea on #[ZinkyJS] basics.
  section#server-section.doc-section
    h2.section-title Zinky class (server) API
    #server-constructor.section-block
      h3 Constructor
      p The simplest way to create a #[span.ht Zinky] instance is this:
      pre
        code.language-javascript
          | const Zinky = require('zinky');
          | var server = new Zinky();
      p This will use the default option values of #[span.ht Zinky], however you can customize the server configuration by passing an object argument with this options:
      h4 Constructor Options
      .sub-section
        h5 port
        p The port on which the server will listen. #[i Default: 3000]
        p Eg:
        pre
          code.language-javascript
            | const Zinky = require('zinky');
            | var server = new Zinky({
            |   port: 8080 // The sever will listen on port 8080
            | });
        h5 env
        p The project environment. #[i Default: 'development']
        p Eg:
        pre
          code.language-javascript
            | const Zinky = require('zinky');
            | var server = new Zinky({
            |   env: 'production'
            | });
        h5 aliases
        p Aliases gives you the possiblity to edit module names in route. #[i Default: {}]
        p For example, imagine you have a module #[span.ht auth] in which you have #[span.ht GET_dosomething], normally this function is called when a you request #[span.ht get] to #[span.ht /auth/dosomething].
        p Now, if you want to change the word #[span.ht auth] only in route without changing the module name so you can call the same function with a request to #[span.ht /sign/dosomething], you'll have to write this simple line:
        p Eg:
        pre
          code.language-javascript
            | const Zinky = require('zinky');
            | var server = new Zinky({
            |   aliases: {
            |     'sign': 'auth' // Now, everytime you request 'sign' module, zinky will understand that you mean 'auth'
            |   }
            | });
        p The #[span.ht aliases] option is especially useful when you want to attach a module to the app root.
        p#root-aliases For example, you want to run the module home when the user requests www.mysite.com, you just have to do:
        pre
          code.language-javascript
            | const Zinky = require('zinky');
            | var server = new Zinky({
            |   aliases: {
            |     '': 'home' // Now when you request: get www.mysite.com, Zinky will look for GET_root(req, res) in home module.
            |   }
            | });
        h5 notFoundView
        p The html returned when the requested action does not exist. #[i Default: '&lt;h1&gt;404 Not Found&lt;/h1&gt;']
        p Eg:
        pre
          code.language-javascript
            | const Zinky = require('zinky');
            | var server = new Zinky({
            |   notFoundView: '&lt;div class=&quot;myclass&quot;&gt; This page does not exist in this website&lt;/div&gt;'
            | });
        h5 internalErrorMsg
        p The message to return when an internal server error occurs. #[i Default: 'Internal Server Error']
        p Eg:
        pre
          code.language-javascript
            | const Zinky = require('zinky');
            | var server = new Zinky({
            |   internalErrorMsg: 'Ooops an error has occured in server'
            | });
        h5 staticFolder
        p The path to folder that contains served static files. #[i Default: 'public']
        p Eg:
        pre
          code.language-javascript
            | const Zinky = require('zinky');
            | var server = new Zinky({
            |   staticFolder: 'assets' // Zinky will serve the files in 'assets' folder.
            | });
        h5 staticModuleName
        p By default, when you want to get a file from the static folder, you request #[span.ht /file/example.ext]. If you want to change #[span.ht file] by something else you'll have to have to mention it in this option. #[i Default: 'file']
        p Eg:
        pre
          code.language-javascript
            | const Zinky = require('zinky');
            | var server = new Zinky({
            |   staticModuleName: 'statics' // Now if you request '/statics/example.ext' Zinky will look for it in 'public' folder.
            | });
        h5 extra
        p Here you can put anything you want.#[i Default: {}]
        p Eg:
        pre
          code.language-javascript
            | const Zinky = require('zinky');
            | var server = new Zinky({
            |   extra: {
            |     message: 'My extra data'
            |   }
            | });
    #server-listen.section-block 
      h3 listen(#port*)
      p Start to listen on #port*.
      p If #port* is provided it will overwrite the existing #[span.ht server.port].
      p Eg:
      pre
        code.language-javascript
          | const Zinky = require('zinky');
          | var server = new Zinky();
          | server.listen() // server will listen on port 3000
      pre
        code.language-javascript
          | const Zinky = require('zinky');
          | var server = new Zinky();
          | server.listen(8080) // server will listen on port 8080
      pre
        code.language-javascript
          | const Zinky = require('zinky');
          | var server = new Zinky({
          |   port: 2000
          | });
          | server.listen() // server will listen on port 2000
      pre
        code.language-javascript
          | const Zinky = require('zinky');
          | var server = new Zinky({
          |   port: 2000
          | });
          | server.listen(4000) // server will listen on port 4000
    #server-addhook.section-block 
      h3 addHook(hook())
      p Hooks are a serie of successive functions that run before any request action.
      p Eg:
      pre
        code.language-javascript
          | const Zinky = require('zinky');
          | var server = new Zinky();
          | server.addHook((req, res, next) => {
          |   console.log('I am a hoooooook');
          |   next();
          | }) // Now, everytime you have a request you'll see 'I am a hoooooook' in the console.
      p Of course, you can use #[span.ht Express] middlewares as hooks without any problem.
    #server-modules.section-block 
      h3 modules
      p #[span.ht server.modules] contains all the application modules with their methods and views...
  section#foola-section.doc-section
    h2.section-title Foola (app module) API
    #foola-tree.section-block 
      p This is how a basic module looks like:
      pre
        code.language-markup
          | module
          |   |_ client
          |   |_ views
          |   |_ index.js
    #foola-index.section-block
      h3 index.js
      p This is the simplest index.js of a module.
      pre
        code.language-javascript
          | const Foola = require('foola');
          | 
          | class ModuleName extends Foola {
          | 
          |   GET_root(req, res) {
          |     res.end('You are in module home page');
          |   }
          | 
          | }
          | 
          | module.exports = ModuleName;
      p Let's explain it:
      h4 Inheritance
      pre
        code.language-javascript
          | const Foola = require('foola');
          | 
          | class ModuleName extends Foola
      p Here we extended our module to #[span.ht Foola] class.
      p Of course, you can extend your class to some other class but keep in mind that #[span.ht Foola] should be the top most one.
      p Eg:
      pre
        code.language-javascript
          | class Auth extends Foola
      p Then you can do:
      pre
        code.language-javascript
          | class SocialAuth extends Auth
      h4 Routing
      p Using #[span.ht Zinky] framework, you don't need routes configuration. However it follows a convention that makes it easy to know what action is done for any given route.
      p The convention is:
      pre
        code.language-markup
          | /moduleName/action/params[0]/params[1]/params[2]/...
      p Eg:
      p #[span.ht POST] to: #[span.ht /auth/login/omar/123456]
      p And to handle this request add this method to #[span.ht app_modules/auth/index.js]:
      pre
        code.language-javascript
          | POST_login(req, res) {
          |   req.params[0] // omar
          |   req.params[1] // 123456
          | }
      h5 Module's root
      p Imagine now you want to GET a module's root, you'll request this: #[span.ht /auth/]
      p And to handle this request add this method to #[span.ht app_modules/auth/index.js]:
      pre
        code.language-javascript
          | GET_root(req, res) {
          |   res.end("This is the auth's root")
          | }
      p You can do the same thing with #[span.ht POST], #[span.ht PUT], #[span.ht PATCH]...
      h5 Before Hooks
      p It is possible to attach hooks to a single action (route) by using #[span.ht BEFORE_].
      p Eg:
      p You have a module named #[span.ht comment] in which you have #[span.ht POST_root], so you add this method to #[span.ht app_modules/auth/index.js]:
      pre
        code.language-javascript
          | BEFORE_comment_POST_root(req, res) {
          |   console.log("You posted a request to /comment/ but i'm running before it")
          | }
      p It is possible to attach many before hooks to one single action.
      h5 After Hooks
      p Imagine you want to run something after an action, in another module, has been sent. You can use the after hooks.
      p Eg:
      p You have a module named #[span.ht comment] in which you have #[span.ht POST_root], so you add this method to #[span.ht app_modules/auth/index.js]:
      pre
        code.language-javascript
          | AFTER_comment_POST_root(req, res) {
          |   console.log("The post request to /comment/ has received a response, now it's me who's running")
          | }
    #foola-views.section-block
      h3 Views
      p #[span.ht Foola] uses #[a(href="https://www.npmjs.com/package/pug-layout") pug-layout] to handle its views.
      p Module's views are stored in views folder.
      p Then you'll find the views in #[span.ht views] object in module class.
      p Eg:
      pre
        code.language-markup
          | app_modules
          |   |_ auth
          |     |_ views
          |       |_ main.pug
          |     |_ index.js
      h6 main.pug
      pre
        code.language-jade
          | h1 Auth module main page
      h6 index.js
      pre
        code.language-javascript
          | const Foola = require('foola');
          | 
          | class Auth extends Foola {
          | 
          |   GET_root(req, res) {
          |     var html = this.views.main.render();
          |     res.end(html);
          |   }
          | 
          | }
          | 
          | module.exports = Auth;
      p Now, if you visit #[span.ht /auth/] you'll get #[span.ht main.pug]'s content.
      h4 Pages & Layouts
      p Views are by default read as Pages(see #[a(href="https://www.npmjs.com/package/pug-layout") pug-layout docs]), If you want them to be considered layouts, just start the view file name with #[span.ht L_].
      p Eg:
      pre
        code.language-markup
          | app_modules
          |   |_ auth
          |     |_ views
          |       |_ main.pug
          |       |_ L_layout.pug
          |     |_ index.js
      h6 L_layout.pug
      pre
        code.language-jade
          | html
          |   body
          |     header
          |       My Awesome Website
          |     block content
      h6 main.pug
      pre
        code.language-jade
          | block content
          |   h1 Auth module main page
      h6 index.js
      pre
        code.language-javascript
          | const Foola = require('foola');
          | 
          | class Auth extends Foola {
          | 
          |   GET_root(req, res) {
          |     var layout = this.views.L_layout;
          |     this.views.main.extends(layout);
          |     var html = this.views.main.render();
          |     res.end(html);
          |     // Or a better way to do all what you saw above is:
          |     // res.render(this.views.main, {}, this.views.L_layout);
          |   }
          | 
          | }
          | 
          | module.exports = Auth;
    #foola-client.section-block
      h3 client (static files)
      p #[span.ht client] folder contains all the served static files of your module, They are accessed from #[span.ht file] action.
      p Eg:
      pre
        code.language-markup
          | app_modules
          |   |_ auth
          |     |_ client
          |       |_ img
          |          |_ logo.png
          |     |_ views
          |       |_ main.pug
          |     |_ index.js
      p In order to get #[span.ht logo.png] use this route: #[span.ht /auth/file/img/logo.png].
      h6 maing.pug
      pre
        code.language-jade
          | img(src="/auth/file/img/logo.png")
      p
        .callout-block.callout-warning
          .icon-holder
            i.fa.fa-exclamation-triangle
          .content
            .callout-title About root aliased module's files
            p If the module is aliased to app root (see #[a(href="#root-aliases") this]), you'll still have to write the module's name in order to get its files, so you write #[span.ht /modulename/file/myfile.ext], instead of #[span.ht /file/myfile.ext].
  section#req-section.doc-section
    h2.section-title req API
    #req-modulename.section-block
      h3 req.moduleName
      p The requested module name.
      pre
        code.language-javascript
          | GET /auth/login/omar/123456?remember=1
          | // req.moduleName = 'auth'
    #req-action.section-block
      h3 req.action
      p The requested action name.
      pre
        code.language-javascript
          | GET /auth/login/omar/123456?remember=1
          | // req.action = 'login'
    #req-operation.section-block
      h3 req.operation
      p The function name that will be called on this request.
      pre
        code.language-javascript
          | GET /auth/login/omar/123456?remember=1
          | // req.operation = 'GET_login'
    #req-params.section-block
      h3 req.params
      p The request params.
      pre
        code.language-javascript
          | GET /auth/login/omar/123456?remember=1
          | // req.params = ['omar', '123456']
    #req-query.section-block
      h3 req.query
      p The request GET params.
      pre
        code.language-javascript
          | GET /auth/login/omar/123456?remember=1
          | // req.query = {remember: 1}
    #req-server.section-block
      h3 req.server
      p the server object
  section#res-section.doc-section
    h2.section-title res API
    #res-render.section-block
      h3 res.render(pugLayout.Page view, {locals}, pugLayout.Layout layout*)
      p Responds with rendered view.
      pre
        code.language-javascript
          | res.render(this.views.index, {title:'Home Page'}, this.views.L_layout);
    #res-redirect.section-block
      h3 res.redirect('location')
      p  Redirects to given url.
      pre
        code.language-javascript
          | res.redirect('/');
    #res-json.section-block
      h3 res.json({obj})
      p  Responds with json object.
      pre
        code.language-javascript
          | res.json({id: 50, username: 'omar'});
    #res-status.section-block
      h3 res.status(#code)
      p  Sets the HTTP status for the response.
      pre
        code.language-javascript
          | res.status(400);
    #res-contenttype.section-block
      h3 res.contentType('contentType')
      p  Sets the HTTP content-type for the response.
      pre
        code.language-javascript
          | res.contentType('text/html');
          | // equivalent to res.setHeader('Content-Type', 'text/html');
    #res-deliver.section-block
      h3 res.deliver(#status, 'response')
      p  Sends the response with the given HTTP status.
      pre
        code.language-javascript
          | res.deliver(401, 'Sorry! you are not authorized to do that');
    #res-reload.section-block
      h3 res.reload()
      p  Redirects back to the URL specified in the Referer header.
      pre
        code.language-javascript
          | res.reload();
    #res-cookie.section-block
      h3 res.cookie('name', val, {options})
      p  Sets a cookie.
      pre
        code.language-javascript
          | res.cookie('lang', 'ar', { maxAge: 30758400000, httpOnly: true });
    #res-clearOneCookie.section-block
      h3 res.clearOneCookie('name')
      p  Clears a cookie.
      pre
        code.language-javascript
          | res.clearOneCookie('session');
    #res-clearcookies.section-block
      h3 res.clearCookies()
      p  Clears all cookies.
      pre
        code.language-javascript
          | GET_logout(req, res) {
          |   res.clearCookies();
          |   res.redirect('/');
          | }
  section#cli-section.doc-section
    h2.section-title zinky-cli
    .section-block
      p #[span.ht zinky-cli] is a cli tool for #[span.ht ZinkyJS]
    #cli-install.section-block
      h3 Installation
      pre
        code.code-cli npm i -g zinky-cli
    #cli-gen_app.section-block
      h3 Generate application boilerplate
      pre
        code.code-cli zinky -a appName
      p Or:
      pre
        code.code-cli zinky --create_app appName
    #cli-gen_module.section-block
      h3 Generate application module
      pre
        code.code-cli zinky -M moduleName
      p Or:
      pre
        code.code-cli zinky --app_module moduleName
